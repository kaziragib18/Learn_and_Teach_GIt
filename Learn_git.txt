Learn How to handle git and github.

Difference bwtween git and github,

Git: A version control system for tracking changes in files, code and managing project history. It works locally on your machine. For example that I showed,

git init, git add . , git commit -m "Your commit massage"

GitHub: A platform that hosts Git repositories online, allowing for collaboration, code sharing, and project management. For example that I showed,

git remote add origin https://github.com/Kaziragib18/Lean_and_Teach_Git.git
git push -u origin master

You add the GitHub repository as a remote and push your local commits to it.


The git checkout -b command is used to create a new branch and immediately switch to it in Git. Here's what it does:

-b: This flag tells Git to create a new branch.

<branch-name>: The name you specify for the new branch. For example,
git checkout -b feature-branch

Important note, always make sure where you are creating branch from. If you create branch from main but you are on the feature-branch and create a new branch from there it will inharit the feature-branch code not main branch code.

# You're on 'main'
git checkout -b new-branch

If you're on a feature branch and create a new branch, it will inherit the state of the feature branch.

# You're on 'feature-branch'
git checkout -b new-feature-branch

Always be mindful of which branch you're on when creating a new branch.

If you want to create a branch from a specific branch (like main), either check out main first or explicitly reference it when creating the new branch. So use this to spacify the exact source branch,

git checkout -b <new-branch-name> <source-branch>

Next after changing to the feature-branch, we will push them in the github remote repository: git push -u origin feature-branch

After that, we will be creating and Working with Pull Requests (PRs): basicall, pull requests (PRs) are a way to propose changes and collaborate with others on GitHub. Step as I showed so far,

Step 1: git push -u origin feature-branch -- Push your feature branch to GitHub

Step 2: Go to your GitHub repository, and you'll see an option to Create Pull Request.

Step 3: Provide a title and description for the pull request, then click Create Pull Request.

Step 4: Once the PR is reviewed and approved, it can be merged into the main or develop branch on GitHub.

Step 5: After merging the pull request, you can delete the feature branch.


Learn merge conflict in github

How git reset works -
It isused to undo changes in your Git history or your working directory. Think of it as a "go back to a previous state" button.

For this is a  line test-1 - code that we will add . in the github (stageing not pushed)

This is a line test-2 - code that we will add. in github (stageing not pushed)

let say bad code - line test-3 - will break the production. This code that we will add. in github (stageing not pushed)

As we see from the git log using git reset hash of the commit, we can remove the commit that we added from the git. Use git status to check the modified file and you will see the green line as they are now unstage from the github.

Say you pushed a commit to GitHub that you now want to remove from GitHub,bBut you want to keep the code locally. to do this 
git reset --soft HEAD~1
what it does it go back one commit, but keep the code (soft reset). This removes the latest commit. Your code will stay in the staging area. Nothing is lost.
then use, git push origin main --force
why force?  Git requires --force because you're changing the commit history, and Git wants to protect your remote (GitHub) from accidental data loss.

if we do this, git push origin main
Git will says: ❌ "You can't do that — your history doesn't match."

so you this, git push origin main --force
This tells Git: ✅ "Yes, I know. Overwrite GitHub’s history with my local one."

Safer alternative: --force-with-lease
If you're working with others, this is better:
git push origin main --force-with-lease

It checks that no one else has pushed in the meantime. If someone did, it stops to prevent accidental overwrites.