Learn How to handle git and github.

Difference bwtween git and github,

Git: A version control system for tracking changes in files, code and managing project history. It works locally on your machine. For example that I showed,

git init, git add . , git commit -m "Your commit massage"

GitHub: A platform that hosts Git repositories online, allowing for collaboration, code sharing, and project management. For example that I showed,

git remote add origin https://github.com/Kaziragib18/Lean_and_Teach_Git.git
git push -u origin master

You add the GitHub repository as a remote and push your local commits to it.


The git checkout -b command is used to create a new branch and immediately switch to it in Git. Here's what it does:

-b: This flag tells Git to create a new branch.

<branch-name>: The name you specify for the new branch. For example,
git checkout -b feature-branch

Important note, always make sure where you are creating branch from. If you create branch from main but you are on the feature-branch and create a new branch from there it will inharit the feature-branch code not main branch code.

# You're on 'main'
git checkout -b new-branch

If you're on a feature branch and create a new branch, it will inherit the state of the feature branch.

# You're on 'feature-branch'
git checkout -b new-feature-branch

Always be mindful of which branch you're on when creating a new branch.

If you want to create a branch from a specific branch (like main), either check out main first or explicitly reference it when creating the new branch. So use this to spacify the exact source branch,

git checkout -b <new-branch-name> <source-branch>

Next after changing to the feature-branch, we will push them in the github remote repository: git push -u origin feature-branch

After that, we will be creating and Working with Pull Requests (PRs): basicall, pull requests (PRs) are a way to propose changes and collaborate with others on GitHub. Step as I showed so far,

Step 1: git push -u origin feature-branch -- Push your feature branch to GitHub

Step 2: Go to your GitHub repository, and you'll see an option to Create Pull Request.

Step 3: Provide a title and description for the pull request, then click Create Pull Request.

Step 4: Once the PR is reviewed and approved, it can be merged into the main or develop branch on GitHub.

Step 5: After merging the pull request, you can delete the feature branch.


Git conflict ----------------
So here is the review note on what we did so far

let say, 2 dev working side by side - create 2 branches from the main.


First, we have created one branches dev_kazi main branch and switch to that branch and made some changes in the file then add the file in github and send for peer review and not not yet approved.

In the meantime, your teammate who has created the 2nd branch which is dev_Test from the main branch - work on the same file what you have made changes and add the code on github and send for peer review as well.

Although the dev_kazi branch is send to peer review before dev_Test branch the reviewer add the dev_Test branch code and merged the pull request.

Because of this dev-kazi peer review now show conflict as it now doesn't match with the main branch because both of them now change in the same file or line of code. So we have to resolve the conflict with the main branch as it now update with the dev_Test code.

So as a user we need to check the code and decide which we will keep from which branch. So this,\
1. we have to checkout to the to main branch from dev_kazi branch
2. git pull - the latest changes from main - as dev_Test upate the code. After that you will see the local and main branch are identical.
3. Then we can checkout to dev-kazi branch as now we will marge our code to main branch for dev-kazi branch -
git merge main
4. After adding this command we will see the conflict and how to fix them - code editor will show resolve conflict button where you will see which line of code to accept, after resolving then push the code. Then you will see dev_kazi pull request with no conflict with the base branch. Then finally merging the pull request with main branch.